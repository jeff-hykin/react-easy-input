// Generated by CoffeeScript 2.3.1
var Invalid, get, isInvalid, set;

get = function(obj, keyList, failValue = null) {
  var each;
  if (typeof keyList === 'string') {
    keyList = keyList.split('.');
  }
  for (each in keyList) {
    try {
      obj = obj[each];
    } catch (error) {
      return failValue;
    }
  }
  if (obj === null) {
    return failValue;
  } else {
    return obj;
  }
};

set = function(obj, attributeList, value) {
  var elem, lastAttribute;
  lastAttribute = attributeList.pop();
  for (elem in attributeList) {
    if (!obj[elem] instanceof Object) {
      obj[elem] = {};
    }
    obj = obj[elem];
  }
  return obj[lastAttribute] = value;
};

Invalid = class Invalid {
  constructor(value, errorMsg) {
    var valueCopy;
    this.valueOf = this.valueOf.bind(this);
    this.toString = this.toString.bind(this);
    valueCopy = value;
    // unwrap any invalid values
    while (valueCopy instanceof Invalid) {
      valueCopy = valueCopy.value;
    }
    this[Symbol.toPrimitive] = function(hint) {
      return this.value;
    };
    this.value = valueCopy;
    this.errorMsg = errorMsg;
  }

  valueOf() {
    return this.value;
  }

  toString() {
    return this.value;
  }

};

isInvalid = function(value) {
  var name;
  name = get(value, ["constructor", "name"]);
  if (name === "Invalid") {
    return true;
  } else {
    return false;
  }
};

module.exports.Invalid = Invalid;

module.exports.isInvalid = isInvalid;

module.exports.set = set;

module.exports.get = get;
