// Generated by CoffeeScript 2.3.1
var HandleChange, Invalid, React, converters, dependencies, isInvalid, retrieveKeyValueNoExceptions;

React = require("react");

dependencies = require("./converters");

// re-exports
converters = dependencies.converters;

module.exports.converters = converters;

Invalid = dependencies.Invalid;

module.exports.Invalid = Invalid;

isInvalid = dependencies.isInvalid;

module.exports.isInvalid = isInvalid;

HandleChange = (thisFromComponent, stateAttribute, inputer = null) => {
  return (event) => {
    var copyOfState, newValue;
    copyOfState = Object.assign(thisFromComponent.state);
    // create a copy of state instead of mutating the original
    newValue = event.target.value;
    // if there is a converter function, then run the function before it returns to state
    // for example convert "True" into the boolean: true, or convert the string "Jan 12 2017" to dateTime(1,12,2017)
    if (inputer) {
      newValue = inputer(newValue);
    }
    eval("copyOfState." + stateAttribute + " = newValue");
    // if the Attribute is not nested
    // update the compoenent state once with the new state
    return thisFromComponent.setState(copyOfState);
  };
};

retrieveKeyValueNoExceptions = function(object, nested_element, fail_value = "") {
  var output;
  output = fail_value;
  try {
    output = eval("object" + nested_element);
  } catch (error) {}
  return output;
};

module.exports.Input = function(props) {
  var classAdd, className, converter, each, expectedProps, i, intputer, len, linkTo, otherProps, outputer, ref, valueFromState;
  // create a mutable copy of props
  if (props.linkTo) {
    linkTo = props.linkTo;
  } else {
    linkTo = null;
  }
  if (props.className) {
    className = props.className;
  } else {
    className = "easy-input";
  }
  if (props.classAdd) {
    classAdd = props.classAdd;
  } else {
    classAdd = "";
  }
  expectedProps = ["linkTo", "className", "classAdd"];
  otherProps = {};
  ref = Object.keys(props);
  for (i = 0, len = ref.length; i < len; i++) {
    each = ref[i];
    if (!expectedProps.includes(each)) {
      otherProps[each] = props[each];
    }
  }
  
  // add additional classes
  className = className + " " + classAdd;
  if (otherProps.invalid) {
    // add error class if there is an "invalid" prop
    className = "easy-input-error " + className;
  }
  
  // Controlled input

  if (otherProps.this && linkTo) {
    // get the value from the component's state
    valueFromState = retrieveKeyValueNoExceptions(otherProps.this.state, "." + linkTo);
    
    // add error class if the value is invalid
    if (isInvalid(valueFromState && !(typeof otherProps.invalid === 'bool' && otherProps.invalid === false))) {
      className = "easy-input-error " + className;
    }
    // add the classname
    otherProps.className = className;
    
    // retrieve converters
    if (converters[otherProps.type]) {
      converter = converters[otherProps.type];
    } else {
      converter = {};
    }
    if (otherProps.outputer) {
      outputer = otherProps.outputer;
    } else {
      outputer = converter.outputer;
    }
    if (otherProps.intputer) {
      intputer = otherProps.intputer;
    } else {
      intputer = converter.intputer;
    }
    
    // convert the display value if needed
    if (outputer) {
      valueFromState = outputer(valueFromState);
    }
    
    // always convert null values to "" (otherwise react will complain)
    if (valueFromState === null || valueFromState === void 0) {
      valueFromState = "";
    }
    
    // attach default props
    if (otherProps.value) {
      otherProps.value = otherProps.value;
    } else {
      otherProps.value = valueFromState;
    }
    if (otherProps.onChange) {
      otherProps.onChange = otherProps.onChange;
    } else {
      otherProps.onChange = HandleChange(otherProps.this, linkTo, inputer);
    }
    return React.createElement('input', otherProps, null);
  }
  if (isInvalid(otherProps.value)) {
    
    // uncontrolled input

    // add error class if the value is invalid 
    className = "easy-input-error " + className;
  }
  if (!otherProps.className) {
    
    // attach default props
    otherProps.className = className;
  }
  return React.createElement('input', otherProps, null);
};
